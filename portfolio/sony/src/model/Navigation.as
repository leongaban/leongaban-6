package src.model // SonyCurtain{    import gs.easing.*;	import gs.TweenLite;	import flash.text.TextField;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.geom.Matrix;	import flash.net.navigateToURL;	import flash.net.URLVariables;	import flash.net.URLRequest;		import src.display.Intro;	import src.model.Fonts;	import src.events.CustomEvent;	// ☼················································································ ¤ Public Class ¤	public class Navigation extends MovieClip	{		private var SPACER     :Number  = 1;		private var navSIZE    :Number  = 401;		private var navBtnY    :Number  = 504;		private var buttons    :Array   = []		private var cataText   :Array   = []		private var $btn1      :Boolean = false;		private var $btn2      :Boolean = false;		private var nav        :MovieClip;		private var tab1       :MovieClip;		private var tab2       :MovieClip;		private var navRoll    :MovieClip;		private var closeTabX  :MovieClip;		private var thumbRow1  :MovieClip;		private var thumbRow2  :MovieClip;		private var introTab   :MovieClip;		private var introTab1  :MovieClip;		private var scrollMov1 :MovieClip;		private var scrollMov2 :MovieClip;		private var storeBtn1;		private var storeBtn2;				public static var instance:Navigation;				// ☼················································································→ Constructor		public function Navigation() {			this.addEventListener(Event.ADDED_TO_STAGE, addedStage);		}				public function addedStage(event:Event) {			this.removeEventListener(Event.ADDED_TO_STAGE, addedStage);		}		public function init(num, myArray, tabNum1, tabNum2, scrollr1, scrollr2):void		{			instance   = this;						introTab   = tabNum1;			tab1       = tabNum1;			tab2       = tabNum2;			thumbRow1  = tabNum1;			thumbRow1  = introTab1;			thumbRow1  = tabNum2;			scrollMov1 = scrollr1;			scrollMov2 = scrollr2;			closeTabX  = new CloseTabX();						closeTabX.mouseEnabled  = false;			closeTabX.mouseChildren = false;						// ☼············································································→ Create Blue Buttons			for (var i:Number = 0; i < num; i++)			{							var nav            = new Nav;					nav.name       = "button" +i;					nav.x          = i * navSIZE;					nav.y          = navBtnY;					nav.buttonMode = true;									var navRoll        = new NavRoll;					navRoll.name   = "rollbutton" +i;					navRoll.alpha  = 0;						// ☼············································································→ Create Blue Button Text				var navCopy:TextField         = new TextField();					navCopy.defaultTextFormat = Fonts.navStyle;					navCopy.antiAliasType     = flash.text.AntiAliasType.NORMAL;					navCopy.embedFonts        = true;					navCopy.gridFitType       = "PIXEL";					navCopy.sharpness         = 100;					navCopy.y                 = 10;					navCopy.width             = 399;					navCopy.height            = 20;					navCopy.text              = myArray[i].id;					navCopy.selectable        = false;					navCopy.mouseEnabled      = false;					cataText.push(navCopy);									var navCopyS:TextField         = new TextField();					navCopyS.defaultTextFormat = Fonts.navStyleShadow;					navCopyS.antiAliasType     = flash.text.AntiAliasType.NORMAL;					navCopyS.embedFonts        = true;					navCopyS.gridFitType       = "PIXEL";					navCopyS.sharpness         = 100;					navCopyS.y                 = 9;					navCopyS.width             = 399;					navCopyS.height            = 20;					navCopyS.text              = myArray[i].id;					navCopyS.selectable        = false;					navCopyS.mouseEnabled      = false;					cataText.push(navCopyS);								nav.addChild(navRoll);				nav.addChild(navCopyS);				nav.addChild(navCopy);				addChild(nav);								buttons.push(nav) // PUSH BUTTONS ARRAY				buttons[i].addEventListener(MouseEvent.MOUSE_UP, handleButtonClick);				buttons[i].addEventListener(MouseEvent.ROLL_OVER, handleButtonOver);								storeBtn1 = buttons[0];				storeBtn2 = buttons[1];			}						// ☼············································································→ Button Handler Listeners			function handleButtonOver(event:MouseEvent):void			{							var button:MovieClip = event.target as MovieClip;				var id:Number = Number(button.name.split("button")[1]);				event.target.getChildAt(1).text = event.target.getChildAt(1).text;				TweenLite.to(event.target.getChildAt(1), .4, {alpha:1, ease:Strong.easeOut});				button.addEventListener(MouseEvent.ROLL_OUT, handleButtonOff);			}						function handleButtonOff(event:MouseEvent):void			{				var button:MovieClip = event.target as MovieClip;				event.target.getChildAt(1).text = event.target.getChildAt(1).text;				TweenLite.to(event.target.getChildAt(1), .4, {alpha:0, ease:Strong.easeOut});			}						function dispatchPause():void {				trace("♥ Pause event dispatched ♥");				trace("\r");				dispatchEvent (new CustomEvent(CustomEvent.PAUSE_MOVIE, {})); // Dispatches → Main class to Pause Video			}						function dispatchPlay():void {				trace("♥ Pause event dispatched ♥");				trace("\r");				dispatchEvent (new CustomEvent(CustomEvent.PLAY_MOVIE, {})); // Dispatches → Main class to Play Video			}									function handleButtonClick(event:MouseEvent):void			{				// ☼············································································→ Dispatches to Main class to Pauses Video				//dispatchEvent (new CustomEvent(CustomEvent.PAUSE_MOVIE, {}));								var button:MovieClip = event.target as MovieClip;				var id:Number = Number(button.name.split("button")[1]);												// ☼············································································→ Tab Tweening Animation				if (!$btn1 && !$btn2) // Tab1 ↓ Tab2 ↓				{										if (storeBtn2 == buttons[id]) // Tab2 clicked					{							TweenLite.to(buttons[0], 1, {y:navBtnY, ease:Strong.easeOut});							TweenLite.to(buttons[1], 1, {y:54, ease:Strong.easeOut});							TweenLite.to(tabNum2,    1, {y:94, ease:Strong.easeOut});							TweenLite.to(scrollMov2, 1, {y:94, ease:Strong.easeOut});														closeTabX.x = buttons[1].width - (closeTabX.width + 10);							closeTabX.y = buttons[1].height/2 - 15;							buttons[1].addChild(closeTabX);														$btn2 = true;							$btn1 = false;														dispatchPause(); // ♥ Dispatch Pause ♥					} 					else if (storeBtn1 == buttons[id]) // Tab1 clicked 					{							TweenLite.to(buttons[0], 1, {y:54, ease:Strong.easeOut});							TweenLite.to(buttons[1], 1, {y:navBtnY, ease:Strong.easeOut});							TweenLite.to(tabNum1,    1, {y:94, ease:Strong.easeOut});							TweenLite.to(scrollMov1, 1, {y:94, ease:Strong.easeOut});														closeTabX.x = buttons[0].width - (closeTabX.width + 10);							closeTabX.y = buttons[0].height/2 - 15;							buttons[0].addChild(closeTabX);														$btn1 = true;							$btn2 = false;														dispatchPause(); // ♥ Dispatch Pause ♥					}				}				else if ($btn1 && !$btn2) // Tab1 ↑ Tab2 ↓				{					if (storeBtn2 == buttons[id]) // Tab2 clicked					{							TweenLite.to(buttons[0], 1, {y:navBtnY, ease:Strong.easeOut});							TweenLite.to(buttons[1], 1, {y:54, ease:Strong.easeOut});							TweenLite.to(tabNum2,    1, {y:94, ease:Strong.easeOut});							TweenLite.to(tabNum1,    1, {y:510, ease:Strong.easeOut});							TweenLite.to(scrollMov2, 1, {y:94, ease:Strong.easeOut});							TweenLite.to(scrollMov1, 1, {y:544, ease:Strong.easeOut});														buttons[0].removeChild(closeTabX);							buttons[1].addChild(closeTabX);														$btn2 = true;							$btn1 = false;					} 					else if (storeBtn1 == buttons[id]) // Tab1 clicked					{							TweenLite.to(tabNum1,    1, {y:544, ease:Strong.easeOut});							TweenLite.to(buttons[0], 1, {y:navBtnY, ease:Strong.easeOut});							TweenLite.to(scrollMov1, 1, {y:544, ease:Strong.easeOut});														buttons[0].removeChild(closeTabX);														$btn1 = false;														dispatchPlay(); // ♥ Dispatch Play ♥					}				}				else if ($btn2 && !$btn1) // Tab1 ↓ Tab2 ↑				{					if (storeBtn2 == buttons[id]) // Tab2 clicked					{							TweenLite.to(buttons[1], 1, {y:navBtnY, ease:Strong.easeOut});							TweenLite.to(tabNum2,    1, {y:544, alpha:1, ease:Strong.easeOut});							TweenLite.to(scrollMov2, 1, {y:544, ease:Strong.easeOut});														buttons[1].removeChild(closeTabX);														$btn2 = false;														dispatchPlay(); // ♥ Dispatch Play ♥					} 					else if (storeBtn1 == buttons[id]) // Tab1 clicked					{							TweenLite.to(buttons[0], 1, {y:54, ease:Strong.easeOut});							TweenLite.to(buttons[1], 1, {y:navBtnY, ease:Strong.easeOut});							TweenLite.to(tabNum1,    1, {y:94, alpha:1, ease:Strong.easeOut});							TweenLite.to(tabNum2,    1, {y:544, alpha:1, ease:Strong.easeOut});							TweenLite.to(scrollMov2, 1, {y:544, ease:Strong.easeOut});							TweenLite.to(scrollMov1, 1, {y:94, ease:Strong.easeOut});														buttons[1].removeChild(closeTabX);							buttons[0].addChild(closeTabX);														$btn1 = true;							$btn2 = false;					}				}			}					} // end Init						// ☼················································································→ If Nigel play button is clicked				public function introPlayButtonClick():void		{							TweenLite.to(buttons[0], 1, {y:54, ease:Strong.easeOut});			TweenLite.to(buttons[1], 1, {y:navBtnY, ease:Strong.easeOut});			TweenLite.to(introTab,   1, {y:94, ease:Strong.easeOut});			TweenLite.to(scrollMov1, 1, {y:94, ease:Strong.easeOut});						closeTabX.x = buttons[0].width - (closeTabX.width + 10);			closeTabX.y = buttons[0].height/2 - 15;						buttons[0].addChild(closeTabX);						$btn1 = true;			$btn2 = false;		}				public function closeOut():void		{			TweenLite.to(buttons[0], .4, {y:navBtnY, ease:Strong.easeOut});			TweenLite.to(buttons[1], .4, {y:navBtnY, ease:Strong.easeOut});			TweenLite.to(tab1,       .4, {y:544, ease:Strong.easeOut});			TweenLite.to(tab2,       .4, {y:544, ease:Strong.easeOut});			TweenLite.to(scrollMov1, .4, {y:544, ease:Strong.easeOut});			TweenLite.to(scrollMov2, .4, {y:544, ease:Strong.easeOut});						if ($btn1 == true){				buttons[0].removeChild(closeTabX);			}			else if ($btn2 == true){				buttons[1].removeChild(closeTabX);			}					}					// ☼················································································→ Getters & Setters ~~~~~~~		public function set resetNav(value:Boolean):void		{			$btn1 = value;			$btn2 = value;		}	} // end Class	} // end package