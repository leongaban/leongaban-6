package src.display // SonyCurtain{	import gs.easing.*;	import gs.TweenLite;		import flash.net.NetStream;	import flash.net.NetConnection;		import flash.events.Event;	import flash.events.AsyncErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;		import flash.display.Stage;	import flash.display.Sprite;	import flash.display.MovieClip;		import flash.utils.Timer;	import flash.geom.Matrix;	import flash.geom.Rectangle;		import flash.media.Video;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	// ☼ Imported Classes	import src.events.CustomEvent;	import com.vmc.lib.VMCUtility; // ™ VMC		// ☼ -------------------------------------------------------------------------------------- Public Class	public class VideoClass extends MovieClip	{		private const BUFFER_TIME:Number	   = 10;		private const DEFAULT_VOLUME:Number	   = 1;		private const DISPLAY_TIMER_DELAY:int  = 10; // update delay in milliseconds.		private const SMOOTHING:Boolean		   = true; // smoothing for video. may slow down old computers		private const scrubY:Number            = 459; // height of the scrubBar		private const titleBarY:Number         = 474; // height of the titleBar				private var videoStatus:String         = "NotPlaying";		private var bolProgressScrub:Boolean   = false; // flag for progress scrubbing		//private var intLastVolume:Number	   = DEFAULT_VOLUME; // holds the last used volume, but never 0		private var ncConnection:NetConnection = new NetConnection();		private var nsStream:NetStream;		private var protocolArray:Array        = new Array("http", "rtmp"); 		private var serverName:String          = "howtoevery.fcod.llnwd.net";		private var appName:String             = "a1814/o31/sony_nigel";		private var streamName:String          = "";		private var controlsTimer:Timer;		private var tmrDisplay:Timer;		private var vidHold:Video;		private var videoDuration:Number;		private var playBtn:MovieClip;		private var muteBtn:MovieClip;		private var pauseBtn:MovieClip;		private var unMuteBtn:MovieClip;		private var videoArea:MovieClip;		private var volControl:MovieClip;		private var titleBar:Sprite = new Sprite();		private var scrubBar:Sprite = new Sprite();		private var scrubGrab:Sprite = new Sprite();		private var scrubBarBG:Sprite = new Sprite();		private var box:Rectangle;		private var masker:MovieClip;		private var savedMaskWidth:Number;		private var userVolume:Number = 1;		private var lastVolPoint:Number = 1;		private var firstMutehit:Boolean = false;						// ☼ --------------------------------------------------------------------------------- Constructor		public function VideoClass(flvUrl, vidHolder):void		{			initVideo(flvUrl, vidHolder);			this.addEventListener(Event.ADDED_TO_STAGE, stageListens);		}				// ☼ --------------------------------------------------------------------------------- NetStream Check				// Handle Status and Errors		function statusEventHandler(event:NetStatusEvent):void 		{			trace("connected is: " + ncConnection.connected );			trace("event.info.level: " + event.info.level);			trace("event.info.code: " + event.info.code);					switch (event.info.code)			{				case "NetConnection.Connect.Success":					 trace("Connected");					 connectStream();					 break;								case "NetConnection.Connect.Failed":				case "NetConnection.Connect.Rejected":					 trace ("The connection was rejected");					 break;				 				case "NetStream.Play.Stop":					 trace("The stream has finished playing");					 videoStatus = "NotPlaying";					 dispatchEvent (new CustomEvent(CustomEvent.MOVIE_ENDS, {})); // Closes the player					 break;				 				case "NetStream.Play.StreamNotFound":					 trace("The server could not find the stream you specified");					 trace("Stream: " +streamName);					 break;				 				case "NetStream.Publish.BadName":					 trace("The stream name is already used");					 break;			}		}				// ☼ --------------------------------------------------------------------------------- Async Error Handling		public function asyncErrorHandler(event:AsyncErrorEvent):void 		{			trace("asyncErrorHandler"+"\r");		}				// ☼ --------------------------------------------------------------------------------- Declare MetaData		function getMetaData(client_ns) 		{			var metaData:Object = new Object();			metaData.onMetaData = function(metaData:Object):void 			{				videoDuration = Math.round(metaData.duration);				trace("metadata duration = "+videoDuration);				tmrDisplay.start();				//trace("Duration: " + metaData.duration);									// ™ VMC Integration Point - Get Video Duration					// ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬					VMCUtility.getInstance().getRemoteNode().setClipDuration(videoDuration*1000);					// ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬			}			return client_ns.client = metaData;		}				// ☼ --------------------------------------------------------------------------------- Cue Point Check		public function onCuePoint(infoObject:Object):void 		{            trace("cue point");        }				// ☼ --------------------------------------------------------------------------------- Stop Video		public function stopVideoPlayer():void 		{			nsStream.pause();			nsStream.seek(0);			// in order to clear the display, we need to set the visibility to false since the clear function has a bug			vidHold.visible	= false;						// switch play/pause button visibility			playBtn.alpha = 0;			pauseBtn.alpha = 1;		}				// ☼ --------------------------------------------------------------------------------- Connect to Stream		public function connectStream():void 		{				nsStream = new NetStream(ncConnection);			nsStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			nsStream.addEventListener(NetStatusEvent.NET_STATUS, statusEventHandler);			nsStream.client = getMetaData(nsStream);						// Attach Stream and Play			vidHold.attachNetStream(nsStream);			vidHold.smoothing = SMOOTHING;			nsStream.play(streamName);			videoStatus = "IsPlaying";		}				// ☼ --------------------------------------------------------------------------------- initVideo		public function initVideo(flvUrl:String, vidHolder)		{			streamName = flvUrl;			vidHold = vidHolder;						trace("streamName = "+streamName);			trace("----------------------------------------"+"\r");						// ¤ ------------------------------------------------------------------------------------------ ¤ LIMELIGHT ¤			ncConnection.connect(protocolArray[1] + "://" + serverName + "/" + appName );			trace("Stream Path: " + protocolArray[1] + "://" + serverName + "/" + appName + "/" + streamName +"\r"+"\r");			ncConnection.addEventListener(NetStatusEvent.NET_STATUS, statusEventHandler);			ncConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			ncConnection.client = this; // Corrects onBCDone bug			// ¤                                                                                                        ¤						// ☼ --------------------------------------------------------------------------------- Graphic Elements						// scruber background                        The blue progress bar			scrubBarBG.graphics.beginFill(0x666666);     scrubBar.graphics.beginFill(0x2da9d8);			scrubBarBG.graphics.drawRect(0,0,800,15);    scrubBar.graphics.drawRect(0,0,1,15);			scrubBarBG.graphics.endFill();               scrubBar.graphics.endFill();			scrubBarBG.buttonMode = true;                scrubBar.buttonMode = true;			scrubBarBG.alpha = .5;                       			scrubBarBG.y = scrubY;                       scrubBar.y = scrubY;						titleBar.graphics.beginFill(0x666666);			titleBar.graphics.drawRect(0,0,800,30);			titleBar.graphics.endFill();			titleBar.alpha = .75;			titleBar.y = titleBarY;						playBtn               = new PlayBtn;         pauseBtn              = new PauseBtn; 			playBtn.alpha         = 0;                   pauseBtn.buttonMode   = true;			playBtn.buttonMode    = true;						muteBtn               = new MuteBtn;         unMuteBtn             = new UnMuteBtn;			muteBtn.x             = 686;                 unMuteBtn.x           = 686;			muteBtn.y             = 3;                   unMuteBtn.y           = 3;			muteBtn.buttonMode    = true;                unMuteBtn.visible     = false;			                                             unMuteBtn.buttonMode  = true;			volControl            = new Vol;			volControl.x          = 708;			volControl.y          = 3;			volControl.buttonMode = true;			masker                = volControl.maskr;						videoArea = new EmptyMov;						titleBar.addChild(volControl);			titleBar.addChild(playBtn);			titleBar.addChild(pauseBtn);			titleBar.addChild(unMuteBtn);			titleBar.addChild(muteBtn);						videoArea.addChild(scrubBarBG);			//videoArea.addChild(scrubGrab);			videoArea.addChild(scrubBar);			videoArea.addChild(titleBar);						// ☼ --------------------------------------------------------------------------------- Event Listeners			muteBtn.addEventListener(MouseEvent.CLICK, muteClicked);			pauseBtn.addEventListener(MouseEvent.MOUSE_UP, pauseClicked);			scrubBarBG.addEventListener(MouseEvent.MOUSE_DOWN, jumpClicked);			scrubBar.addEventListener(MouseEvent.MOUSE_DOWN, grabBar);			volControl.addEventListener(MouseEvent.MOUSE_UP, volUp);			volControl.addEventListener(MouseEvent.MOUSE_DOWN, volDown);						// Timer			tmrDisplay = new Timer(DISPLAY_TIMER_DELAY);			tmrDisplay.addEventListener(TimerEvent.TIMER, updateDisplay);						addChild(videoArea);			videoControlsTimer(300);		}				// ☼ -------------------------------------------------------------------------------------- Functions		private function stageListens(event:Event):void		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, mouseReleased);			stage.addEventListener(MouseEvent.MOUSE_MOVE, showControls);			this.removeEventListener(Event.ADDED_TO_STAGE, stageListens);		}				function jumpClicked(e:MouseEvent):void		{			//trace("clicked the scrubBarBG");			//trace("mouseX = "+mouseX);			nsStream.seek(Math.round(mouseX * videoDuration / 800))			scrubGrab.x = mouseX * 800 / videoDuration;		}				private function videoControlsTimer(num)		{			controlsTimer = new Timer(num);			controlsTimer.addEventListener(TimerEvent.TIMER,controlsTimer_tick);			controlsTimer.start();		}				private function showControls(event:MouseEvent)		{			videoArea.alpha = 1;			videoControlsTimer(300);		}				private function controlsTimer_tick(e:TimerEvent):void 		{    			controlsTimer.currentCount-1;			//trace("timer = "+controlsTimer.currentCount);			if (controlsTimer.currentCount>=12) 			{				TweenLite.to(videoArea, 1, {alpha:0, ease:Strong.easeOut});				controlsTimer.removeEventListener(TimerEvent.TIMER,controlsTimer_tick);			}		}		public function playClicked(event:MouseEvent):void		{			nsStream.resume(); videoStatus = "IsPlaying";			vidHold.visible	= true;			pauseBtn.alpha = 1;			playBtn.alpha = 0;			titleBar.swapChildren(pauseBtn, playBtn);		}				public function pauseClicked(event:MouseEvent):void		{			nsStream.pause(); videoStatus = "NotPlaying";			pauseBtn.alpha = 0;			playBtn.alpha = 1;			titleBar.swapChildren(playBtn, pauseBtn);			playBtn.addEventListener(MouseEvent.MOUSE_UP, playClicked);		}				// ☼ -------------------------------------------------------------------------------- Space Bar = pause/play		function keyDownHandler(e:KeyboardEvent):void		{			if(e.keyCode==32) // Space Bar			{									if( videoStatus == "IsPlaying")				{					nsStream.pause();					pauseBtn.alpha = 0;					playBtn.alpha = 1;					videoStatus = "NotPlaying";				}				else if (videoStatus == "NotPlaying")				{					nsStream.resume();					pauseBtn.alpha = 1;					playBtn.alpha = 0;					videoStatus = "IsPlaying";				}			}		}				function grabBar(e:MouseEvent):void		{			bolProgressScrub = true;			scrubGrab.startDrag(false, new Rectangle(0, 1, 800, 0));		}				function mouseReleased(e:MouseEvent):void		{			// set progress/volume scrub to false			bolProgressScrub	= false;			scrubGrab.stopDrag();			scrubBar.width	= scrubGrab.x + 15;		}				function updateDisplay(e:TimerEvent):void		{			//trace("updateDisplay");			if(bolProgressScrub)				nsStream.seek(Math.round(scrubGrab.x * videoDuration / 800))				//nsStream.seek(Math.round(scrubGrab.x * objInfo.duration / 800))			else				scrubGrab.x = nsStream.time * 800 / videoDuration;				//scrubGrab.x = nsStream.time * 800 / objInfo.duration; 							scrubBar.width = scrubGrab.x + 15;		}				// ☼ --------------------------------------------------------------------------------- Mute & UnMute		function muteClicked(e:MouseEvent):void		{			setVolume(0);			savedMaskWidth = masker.width;			masker.width = 0;			muteBtn.visible = false;			unMuteBtn.visible = true;			unMuteBtn.addEventListener(MouseEvent.CLICK, unmuteClicked);		}				function unmuteClicked(e:MouseEvent):void		{			// set volume to last used value			// trace("lastVolPoint  = "+lastVolPoint);			if (firstMutehit == false)			{				setVolume(lastVolPoint);				masker.width = savedMaskWidth;				firstMutehit = true;			}			else if (firstMutehit == true)			{				setVolume(userVolume);				masker.width = savedMaskWidth;			}						muteBtn.visible = true;			unMuteBtn.visible = false;		}				// ☼ --------------------------------------------------------------------------------- Set Volume		function setVolume(intVolume:Number):void		{			var sndTransform		= new SoundTransform(intVolume);			nsStream.soundTransform	= sndTransform;						if(intVolume > 0) {				muteBtn.visible		= true;				unMuteBtn.visible	= false;			} else {				muteBtn.visible		= false;				unMuteBtn.visible	= true;			}		}				// ☼ --------------------------------------------------------------------------------- Volume Controls		private function volDown(e:MouseEvent):void		{			masker.width = volControl.mouseX;  // Sound width / 100 * 100			userVolume = (masker.width / 100) * 1;			//trace("userVolume = "+userVolume);			volControl.addEventListener(MouseEvent.MOUSE_MOVE, volMove);		}				private function volMove(e:MouseEvent):void		{			userVolume = (masker.width / 100) * 1;			masker.width = volControl.mouseX;			setVolume(userVolume);			//trace("masker.width = "+masker.width);						if (masker.width == 72)			{				volControl.removeEventListener(MouseEvent.MOUSE_MOVE, volMove);				e.updateAfterEvent();			}			else if (masker.width == 5)			{				volControl.removeEventListener(MouseEvent.MOUSE_MOVE, volMove);				e.updateAfterEvent();			}						e.updateAfterEvent();		}				private function volUp(e:MouseEvent):void		{			lastVolPoint = masker.width;			setVolume(userVolume);			e.updateAfterEvent();			volControl.removeEventListener(MouseEvent.MOUSE_MOVE, volMove);		}				public function thumbPaused():void		{			nsStream.pause(); //videoStatus = "NotPlaying";			pauseBtn.alpha = 0;			playBtn.alpha = 1;			titleBar.swapChildren(playBtn, pauseBtn);			playBtn.addEventListener(MouseEvent.MOUSE_UP, playClicked);		}						public function clearSource():void		{			tmrDisplay.removeEventListener(TimerEvent.TIMER, updateDisplay);			controlsTimer.removeEventListener(TimerEvent.TIMER,controlsTimer_tick);			nsStream.close(); 			videoStatus = "NotPlaying";		}				// ™ VMC Integration Point - function to return current video position		// ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬		public function getPosition():Number {			var pos:Number = 0;			if ( nsStream ) {				pos = nsStream.time;			}			return pos;		}		// ™ VMC "helper" property to get the video url for meta-data purposes		public function get flvSourceUrl():String {				return protocolArray[1] + "://" + serverName + "/" + appName + "/" + streamName + ".flv";		}				public function onBWDone(...args):void {			// prevent the unhandled event error 		}		// ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬			} // end Class	} // end package