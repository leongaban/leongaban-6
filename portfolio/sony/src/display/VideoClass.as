package src.display // SonyCurtain{	import gs.easing.*;	import gs.TweenLite;	import flash.utils.Timer;	import flash.net.NetStream;	import flash.net.NetConnection;	import flash.display.Stage;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.events.NetStatusEvent;	import flash.events.AsyncErrorEvent;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.media.Video;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		import src.events.CustomEvent;	import com.vmc.lib.VMCUtility;		//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ☼ VideoClass ☼	public class VideoClass extends MovieClip	{		private const SMOOTHING      :Boolean   = true;		private const BUFFER_TIME    :Number	= 2;		private const DEFAULT_VOLUME :Number	= 1;		private const CONTROLS_DELAY :Number    = 300;		private const SCRUB_Y        :Number    = 459;		private const TITLE_Y        :Number    = 474;		private const PROGRESS_DELAY :int       = 10;				private var nc               :NetConnection;		private var ns               :NetStream;		private var firstMute        :Boolean   = false;		private var protocolArray    :Array     = new Array("http", "rtmp");		private var videoStatus      :String    = "NotPlaying";		private var serverName       :String    = "";		private var appName          :String    = "";		private var streamName       :String    = "";		private var strSource        :String    = "";		private var userVolume       :Number    = 1;		private var lastVolPoint     :Number    = 1;		private var amountLoaded     :Number;		private var videoDuration    :Number;   // [ VMC ] video duration		private var saveMaskWidth    :Number;		private var vidHold          :Video;		private var tmrDisplay       :Timer;		private var controlsTimer    :Timer;		private var playBtn          :MovieClip;		private var pauseBtn         :MovieClip;		private var masker           :MovieClip;		private var muteBtn          :MovieClip;		private var unMuteBtn        :MovieClip;		private var videoArea        :MovieClip;		private var volControl       :MovieClip;		private var titleBar         :Sprite = new Sprite();		private var bgBar            :Sprite = new Sprite();		private var bufferAni        :Sprite = new Sprite();		private var loadedBar        :Sprite = new Sprite();		private var progressBar      :Sprite = new Sprite();		private var progressPin      :Sprite = new Sprite();		//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Constructor		public function VideoClass(flvUrl, vidHolder):void		{			this.addEventListener(Event.ADDED_TO_STAGE, stageListens);			initVideo(flvUrl, vidHolder);		}		//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ NetStream Check		private function netStatusHandler(event:NetStatusEvent):void 		{			switch (event.info.code) 			{				case "NetStream.Play.StreamNotFound":					trace("Stream not found: " + strSource);				break;								case "NetStream.Buffer.Full":					trace("‹ Buffer is FULL! ›");					removeChild(bufferAni);				break;								case "NetStream.Play.Stop":					trace("The stream has finished playing");					videoStatus = "NotPlaying";					dispatchEvent (new CustomEvent(CustomEvent.MOVIE_ENDS, {}));				break;			}		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Error Handling		private function asyncErrorHandler(event:AsyncErrorEvent):void {trace(event.text);}		private function onBWDone(...args):void {}		private function onXMPData(infoObject:Object):void {}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Declare MetaData		function getMetaData(client_ns) 		{			var metaData:Object = new Object();			metaData.onMetaData = function(metaData:Object):void 			{				videoDuration = Math.round(metaData.duration);				tmrDisplay.start();									// [ VMC ] Integration Point - Get Video Duration					VMCUtility.getInstance().getRemoteNode().setClipDuration(videoDuration*1000);			}			return client_ns.client = metaData;		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ initVideo		private function initVideo(flvUrl:String, vidHolder)		{						strSource = flvUrl;			vidHold   = vidHolder;						nc = new NetConnection();			nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			nc.connect(null);						ns = new NetStream(nc);			ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.client = getMetaData(ns);			ns.bufferTime = BUFFER_TIME;						vidHold.attachNetStream(ns);			vidHold.smoothing = SMOOTHING;						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Graphic Elements			bgBar.graphics.beginFill(0x666666);			bgBar.graphics.drawRect(0,0,800,15);			bgBar.graphics.endFill();			bgBar.buttonMode = true;			bgBar.alpha = .5;			bgBar.y = SCRUB_Y;						progressBar.graphics.beginFill(0x2da9d8);			progressBar.graphics.drawRect(0,0,1,15);			progressBar.graphics.endFill();			progressBar.mouseEnabled = false;			progressBar.mouseChildren = false;			progressBar.y = SCRUB_Y;						loadedBar.graphics.beginFill(0xFFFFFF);			loadedBar.graphics.drawRect(0,0,1,15);			loadedBar.graphics.endFill();			loadedBar.alpha = .2;			loadedBar.y = SCRUB_Y;			loadedBar.buttonMode = true;						titleBar.graphics.beginFill(0x666666);			titleBar.graphics.drawRect(0,0,800,30);			titleBar.graphics.endFill();			titleBar.alpha = .75;			titleBar.y = TITLE_Y;						bufferAni   = new BufferingAnimation;			bufferAni.x = 400;			bufferAni.y = 280;						playBtn             = new PlayBtn;			playBtn.alpha       = 0;			playBtn.buttonMode  = true;						pauseBtn            = new PauseBtn;			pauseBtn.buttonMode = true;						muteBtn            = new MuteBtn;			muteBtn.x          = 686;			muteBtn.y          = 3;			muteBtn.buttonMode = true;						unMuteBtn            = new UnMuteBtn;			unMuteBtn.x          = 686;			unMuteBtn.y          = 3;			unMuteBtn.visible    = false;			unMuteBtn.buttonMode = true;						volControl            = new Vol;			volControl.x          = 708;			volControl.y          = 3;			volControl.buttonMode = true;			masker                = volControl.maskr;						titleBar.addChild(volControl);			titleBar.addChild(playBtn);			titleBar.addChild(pauseBtn);			titleBar.addChild(unMuteBtn);			titleBar.addChild(muteBtn);						videoArea = new EmptyMov;			videoArea.addChild(bgBar);			videoArea.addChild(loadedBar);			videoArea.addChild(progressBar);						videoArea.addChild(titleBar);						//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ [ PLAY VIDEO ] & add Event Listeners			addChild(bufferAni);			ns.play(flvUrl); videoStatus = "IsPlaying";						muteBtn.addEventListener(MouseEvent.CLICK, muteClick);			playBtn.addEventListener(MouseEvent.MOUSE_UP, playClicked);			pauseBtn.addEventListener(MouseEvent.MOUSE_UP, pauseClick);			loadedBar.addEventListener(MouseEvent.MOUSE_UP, jumpClick);			volControl.addEventListener(MouseEvent.MOUSE_UP, volUp);			volControl.addEventListener(MouseEvent.MOUSE_DOWN, volDown);						tmrDisplay = new Timer(PROGRESS_DELAY);			tmrDisplay.addEventListener(TimerEvent.TIMER, updateDisplay);						addChild(videoArea);			videoControlsTimer(CONTROLS_DELAY);		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Listeners & Functions		private function stageListens(event:Event):void		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(MouseEvent.MOUSE_MOVE, showControls);			this.removeEventListener(Event.ADDED_TO_STAGE, stageListens);		}				private function jumpClick(e:MouseEvent):void		{			addChild(bufferAni);			controlsTimer.stop();			controlsTimer.reset();			controlsTimer.start();			ns.seek(Math.round(mouseX * videoDuration / 800))		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Video Timers		private function updateDisplay(e:TimerEvent):void		{						progressPin.x     = ns.time * 800 / videoDuration;			progressBar.width = progressPin.x + 2;			amountLoaded	  = ns.bytesLoaded / ns.bytesTotal;			loadedBar.width   = amountLoaded * 800;		}				private function videoControlsTimer(num)		{			controlsTimer = new Timer(num);			controlsTimer.addEventListener(TimerEvent.TIMER,controlsTimer_tick);			controlsTimer.start();		}				private function showControls(event:MouseEvent)		{			videoArea.alpha = 1;			controlsTimer.addEventListener(TimerEvent.TIMER,controlsTimer_tick);			controlsTimer.start();		}				private function controlsTimer_tick(e:TimerEvent):void 		{    			//trace("timer = "+controlsTimer.currentCount);			if (controlsTimer.currentCount == 12) {				TweenLite.to(videoArea, .5, {alpha:0, ease:Strong.easeOut});				controlsTimer.stop();				controlsTimer.reset();				controlsTimer.removeEventListener(TimerEvent.TIMER,controlsTimer_tick);			}		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Play | Pause		public function playClicked(event:MouseEvent):void		{					ns.resume(); videoStatus = "IsPlaying";			pauseBtn.alpha  = 1;			playBtn.alpha   = 0;			titleBar.swapChildren(pauseBtn, playBtn);						trace("·······················〉 play clicked");			trace("·······················〉 videoStatus = "+videoStatus);			trace("\r");		}				private function pauseClick(event:MouseEvent):void		{			ns.pause(); videoStatus = "NotPlaying";			pauseBtn.alpha = 0;			playBtn.alpha  = 1;			titleBar.swapChildren(playBtn, pauseBtn);						trace("·······················〉 pause clicked");			trace("·······················〉 videoStatus = "+videoStatus);			trace("\r");		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Pause/Play if Tabs clicked | Clear video		public function tabPaused():void		{			ns.pause(); videoStatus = "NotPlaying";			pauseBtn.alpha = 0;			playBtn.alpha  = 1;			titleBar.swapChildren(pauseBtn, playBtn);						trace("·······················〉 thumb paused");			trace("·······················〉 videoStatus = "+videoStatus);			trace("\r");		}				public function unPaused():void		{			ns.resume(); videoStatus = "IsPlaying";			pauseBtn.alpha  = 1;			playBtn.alpha   = 0;			titleBar.swapChildren(pauseBtn, playBtn);						trace("·······················〉 video is unpaused!");			trace("·······················〉 videoStatus = "+videoStatus);			trace("\r");		}				public function clearSource():void		{			tmrDisplay.removeEventListener(TimerEvent.TIMER, updateDisplay);			controlsTimer.removeEventListener(TimerEvent.TIMER,controlsTimer_tick);			nc.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.close(); 			videoStatus = "NotPlaying";		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Space Bar = pause/play		private function keyDownHandler(e:KeyboardEvent):void		{			if(e.keyCode==32) 			{									if( videoStatus == "IsPlaying")	{					ns.pause();					pauseBtn.alpha = 0;					playBtn.alpha  = 1;					videoStatus    = "NotPlaying";				}				else if (videoStatus == "NotPlaying") {					ns.resume();					pauseBtn.alpha = 1;					playBtn.alpha  = 0;					videoStatus    = "IsPlaying";				}			}		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Mute & UnMute		private function muteClick(e:MouseEvent):void		{			setVolume(0);			saveMaskWidth     = masker.width;			masker.width      = 0;			muteBtn.visible   = false;			unMuteBtn.visible = true;			unMuteBtn.addEventListener(MouseEvent.CLICK, unmuteClick);		}				private function unmuteClick(e:MouseEvent):void		{			if (firstMute == false) {				setVolume(lastVolPoint);				masker.width = saveMaskWidth;				firstMute = true;			}				else if (firstMute == true) {				setVolume(userVolume);				masker.width = saveMaskWidth;			}						muteBtn.visible = true;			unMuteBtn.visible = false;		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Set Volume		private function setVolume(intVolume:Number):void		{			var sndTransform = new SoundTransform(intVolume);			ns.soundTransform = sndTransform;						if (intVolume > 0) {				muteBtn.visible	= true;				unMuteBtn.visible = false;			} else {				muteBtn.visible	= false;				unMuteBtn.visible = true;			}		}				//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ Volume Controls		private function volDown(e:MouseEvent):void		{			masker.width = volControl.mouseX;			userVolume = (masker.width / 100) * 1;			volControl.addEventListener(MouseEvent.MOUSE_MOVE, volMove);		}				private function volMove(e:MouseEvent):void		{			userVolume = (masker.width / 100) * 1;			masker.width = volControl.mouseX;			setVolume(userVolume);						if (masker.width == 72)	{				volControl.removeEventListener(MouseEvent.MOUSE_MOVE, volMove);				e.updateAfterEvent();			}			else if (masker.width == 5)	{				volControl.removeEventListener(MouseEvent.MOUSE_MOVE, volMove);				e.updateAfterEvent();			}						e.updateAfterEvent();		}				private function volUp(e:MouseEvent):void		{			lastVolPoint = masker.width;			setVolume(userVolume);			e.updateAfterEvent();			volControl.removeEventListener(MouseEvent.MOUSE_MOVE, volMove);		}				// [ VMC ] Integration Point - function to return current video position		public function getPosition():Number {			var pos:Number = 0;			if ( ns ) {				pos = ns.time;			}			return pos;		}				// [ VMC ] "helper" property to get the video url for meta-data purposes		public function get flvSourceUrl():String {			   return strSource;		}			} // end Class	} // end package